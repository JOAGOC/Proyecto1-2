/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Angel
 */

import static javax.swing.JOptionPane.showMessageDialog;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

public class SerieDeFibonacci extends javax.swing.JFrame {

    private static final String Res = "Resultado: ";
    private static final String TE = "Tiempo de ejecución: ";

    public static SerieDeFibonacci getInstance() {
        if (instance == null)
            instance = new SerieDeFibonacci();
        return instance;
    }

    private SerieDeFibonacci() {
        initComponents();
        addWindowListener(VentanaPrincipal.escuchaHijo);
        collection = new XYSeriesCollection();
        series1 = new XYSeries("Fibonacci (Iterativo)");
        collection.addSeries(series1);
        series2 = new XYSeries("Fibonacci (Recursivo)");
        collection.addSeries(series2);
        jfc = ChartFactory.createXYLineChart("Coste de algoritmo", "Iteración", "Tiempo", collection,
                PlotOrientation.VERTICAL, true, false, false);
        ChartPanel oPanel = new ChartPanel(jfc);
        panelG.setLayout(new java.awt.BorderLayout());
        panelG.add(oPanel);
        panelG.validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        tFNum = new javax.swing.JTextField();
        btnFibonacciIterativo = new javax.swing.JButton();
        lblTiempoIterativo = new javax.swing.JLabel();
        btnFibonacciRecursivo = new javax.swing.JButton();
        lblTiempoRecursivo = new javax.swing.JLabel();
        panelG = new javax.swing.JPanel();
        lblResultado = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Posición de la serie de Fibonacci:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 10);
        getContentPane().add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(tFNum, gridBagConstraints);

        btnFibonacciIterativo.setText("Extraer número (Iterativo)");
        btnFibonacciIterativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFibonacciIterativoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        getContentPane().add(btnFibonacciIterativo, gridBagConstraints);

        lblTiempoIterativo.setText("Tiempo de ejecución: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(lblTiempoIterativo, gridBagConstraints);

        btnFibonacciRecursivo.setText("Extraer número (Recursivo)");
        btnFibonacciRecursivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFibonacciRecursivoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        getContentPane().add(btnFibonacciRecursivo, gridBagConstraints);

        lblTiempoRecursivo.setText("Tiempo de ejecución: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(lblTiempoRecursivo, gridBagConstraints);

        panelG.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout panelGLayout = new javax.swing.GroupLayout(panelG);
        panelG.setLayout(panelGLayout);
        panelGLayout.setHorizontalGroup(
            panelGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 611, Short.MAX_VALUE)
        );
        panelGLayout.setVerticalGroup(
            panelGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 400;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(panelG, gridBagConstraints);

        lblResultado.setText("Resultado :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 10);
        getContentPane().add(lblResultado, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFibonacciRecursivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFibonacciRecursivoActionPerformed
        int posicion=0;
        try {
            posicion = extraerNum();
        } catch (Exception e) {
            showMessageDialog(this, e.getMessage());
            return;
        }
        long tI = System.nanoTime();
        lblResultado.setText(Res + fibonaciiRecursivo(posicion));
        lblTiempoRecursivo.setText(TE + (System.nanoTime() - tI));
        posicion -= 1;
        series2.clear();
        for (int i = 0; i < posicion; i++) {
            series2.add(i, Math.pow(2,(i-1)));
        }
    }//GEN-LAST:event_btnFibonacciRecursivoActionPerformed

    private int extraerNum() throws Exception{
        int posicion;
        try {
            posicion = Integer.parseInt(tFNum.getText());
            if (posicion < 0)
                throw new Exception();
        } catch (Exception e) {
            throw new Exception("Inserta un número natural");
        }
        return posicion;
    }
    
    private void btnFibonacciIterativoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnFibonacciIterativoActionPerformed
        int posicion=0;
        try {
            posicion = extraerNum();
        } catch (Exception e) {
            showMessageDialog(this, e.getMessage());
            return;
        }
        long tI = System.nanoTime();
        lblResultado.setText(Res + fibonaciiIterativo(posicion));
        lblTiempoIterativo.setText(TE + (System.nanoTime() - tI));
        posicion -= 1;
        series1.clear();
        for (int i = 0; i < posicion; i++) {
            series1.add(i, 6 * i + 3);
        }
    }// GEN-LAST:event_btnFibonacciIterativoActionPerformed

    public static int fibonaciiIterativo(int n) {
        if (n == 1 || n == 2) //2
            return 1;//1
        int a = 0, b = 1, c = 0; // 3
        // 1               n    (n-1)
        for (int i = 2; i <= n; i++) {
            c = a + b;// 2
            a = b;// 1
            b = c;// 1
        }
        return c;// 1
    }// 6n-4 => 6n+3;

    public static int fibonaciiRecursivo(int n) {
        if (n == 0)//1
            return 0;//1
        else if (n == 1 || n == 2)//2
            return 1;//1
        else
            return (fibonaciiRecursivo(n - 1) + fibonaciiRecursivo(n - 2));//n
    }//2^(n-1)

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SerieDeFibonacci.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SerieDeFibonacci.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SerieDeFibonacci.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SerieDeFibonacci.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SerieDeFibonacci().setVisible(true);
            }
        });
    }

    private static SerieDeFibonacci instance;
    private JFreeChart jfc;
    private XYSeriesCollection collection;
    private XYSeries series1;
    private XYSeries series2;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFibonacciIterativo;
    private javax.swing.JButton btnFibonacciRecursivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblResultado;
    private javax.swing.JLabel lblTiempoIterativo;
    private javax.swing.JLabel lblTiempoRecursivo;
    private javax.swing.JPanel panelG;
    private javax.swing.JTextField tFNum;
    // End of variables declaration//GEN-END:variables
}
